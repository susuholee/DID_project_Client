// src/app/certificates/my/page.jsx
'use client';

import { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import useUserStore from '@/Store/userStore';

export default function MyCertificatesPage() {
  const router = useRouter();
  const { user, isLoggedIn, addNotification } = useUserStore();

  // TanStack QueryÎ°ú ÏàòÎ£åÏ¶ù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const { 
    data: allCerts = [], 
    isLoading: loading, 
    error, 
    refetch 
  } = useQuery({
    queryKey: ['certificates', user?.userId],
   // queryFn ÎÇ¥Î∂ÄÎ•º Îã§ÏùåÍ≥º Í∞ôÏù¥ ÏàòÏ†ïÌï¥Ï£ºÏÑ∏Ïöî
queryFn: async () => {
  if (!user?.userId) {
    throw new Error('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.');
  }
  
  const response = await axios.get(
    `${process.env.NEXT_PUBLIC_API_BASE_URL}/user/vc/${user.userId}`,
    { withCredentials: true }
  );
  
  // üîç Ï†ÑÏ≤¥ API ÏùëÎãµ Íµ¨Ï°∞ Î®ºÏ†Ä Î°úÍ∑∏
  console.log('=== API Ï†ÑÏ≤¥ ÏùëÎãµ ===', response.data);
  
  // VC ÌòïÌÉúÏùò Î≥µÏû°Ìïú ÏùëÎãµ Íµ¨Ï°∞ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú
  if (Array.isArray(response.data)) {
    console.log(`Ï¥ù ${response.data.length}Í∞úÏùò ÏïÑÏù¥ÌÖú Î∞úÍ≤¨`);
    
    return response.data.map((item, index) => {
      console.log(`\n=== ÏïÑÏù¥ÌÖú ${index + 1} Ï†ÑÏ≤¥ Íµ¨Ï°∞ ===`);
      console.log('Raw item:', JSON.stringify(item, null, 2));
      
      // Í∞Å VCÏóêÏÑú credentialSubject Ï†ïÎ≥¥ Ï∂îÏ∂ú
      const credentialSubject = item.message?.payload?.vc?.credentialSubject || 
                            item.message?.verifiableCredential?.credentialSubject ||
                            item.credentialSubject ||  // ÏßÅÏ†ë Ï†ëÍ∑º ÏãúÎèÑ
                            item;  // Ï†ÑÏ≤¥Í∞Ä credentialSubjectÏù∏ Í≤ΩÏö∞
      
      console.log(`ÏïÑÏù¥ÌÖú ${index + 1} credentialSubject:`, credentialSubject);
      
      if (!credentialSubject) {
        console.warn(` ÏïÑÏù¥ÌÖú ${index + 1}: credentialSubjectÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå`);
        return null;
      }

      //  Î™®Îì† Í∞ÄÎä•Ìïú ÏÉÅÌÉú/ÌÉÄÏûÖ ÌïÑÎìú ÌôïÏù∏
      console.log(`\n=== ÏïÑÏù¥ÌÖú ${index + 1} ÏÉÅÌÉú Í¥ÄÎ†® ÌïÑÎìúÎì§ ===`);
      console.log('credentialSubject.status:', credentialSubject.status);
      console.log('credentialSubject.state:', credentialSubject.state);
      console.log('credentialSubject.requestType:', credentialSubject.requestType);
      console.log('credentialSubject.request:', credentialSubject.request);
      console.log('item.status:', item.status);
      console.log('item.state:', item.state);
      console.log('item.requestType:', item.requestType);
      console.log('item.request:', item.request);
      
      // message Î†àÎ≤®ÏóêÏÑúÎèÑ ÌôïÏù∏
      if (item.message) {
        console.log('item.message.status:', item.message.status);
        console.log('item.message.requestType:', item.message.requestType);
        if (item.message.payload) {
          console.log('item.message.payload.status:', item.message.payload.status);
          console.log('item.message.payload.requestType:', item.message.payload.requestType);
        }
      }

      // Î™®Îì† Í∞ÄÎä•Ìïú ÏúÑÏπòÏóêÏÑú requestTypeÍ≥º status Ï∞æÍ∏∞
      const requestType = credentialSubject.requestType || 
                         credentialSubject.request ||
                         item.requestType ||
                         item.request ||
                         item.message?.requestType ||
                         item.message?.payload?.requestType;
                         
      const statusValue = credentialSubject.status || 
                         credentialSubject.state ||
                         item.status ||
                         item.state ||
                         item.message?.status ||
                         item.message?.payload?.status;

      console.log(`\n=== ÏïÑÏù¥ÌÖú ${index + 1} ÏµúÏ¢Ö Ï∂îÏ∂úÎêú Í∞íÎì§ ===`);
      console.log('Ï∂îÏ∂úÎêú requestType:', requestType);
      console.log('Ï∂îÏ∂úÎêú status:', statusValue);

      // ÏÉÅÌÉú Í≤∞Ï†ï Î°úÏßÅ - Îçî Ìè¨Í¥ÑÏ†ÅÏúºÎ°ú
      let certificateStatus = 'Ïïå Ïàò ÏóÜÏùå'; // Í∏∞Î≥∏Í∞í Î≥ÄÍ≤Ω
      
      // 1. requestType ÌôïÏù∏ (ÏµúÏö∞ÏÑ†)
      if (requestType === 'revoke' || requestType === 'cancel') {
        certificateStatus = 'ÌèêÍ∏∞';
        console.log(`ÏïÑÏù¥ÌÖú ${index + 1}: requestType "${requestType}"ÏúºÎ°ú Ïù∏Ìï¥ ÌèêÍ∏∞ Ï≤òÎ¶¨`);
      }
      // 2. status Í∞í ÌôïÏù∏
      else if (statusValue) {
        if (statusValue === 'approved' || statusValue === 'active' || statusValue === 'valid') {
          certificateStatus = 'Ïú†Ìö®';
          console.log(` ${index + 1}: status "${statusValue}"ÏúºÎ°ú Ïù∏Ìï¥ Ïú†Ìö® Ï≤òÎ¶¨`);
        } else if (statusValue === 'revoked' || statusValue === 'cancelled' || statusValue === 'inactive') {
          certificateStatus = 'ÌèêÍ∏∞';
          console.log(`ÏïÑÏù¥ÌÖú ${index + 1}: status "${statusValue}"ÏúºÎ°ú Ïù∏Ìï¥ ÌèêÍ∏∞ Ï≤òÎ¶¨`);
        } else {
          certificateStatus = statusValue; // ÏõêÎ≥∏ Í∞í Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©
          console.log(`ÏïÑÏù¥ÌÖú ${index + 1}: Ïïå Ïàò ÏóÜÎäî status "${statusValue}" Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©`);
        }
      }
      // 3. Í∏∞Î≥∏Í∞í Ï≤òÎ¶¨
      else {
        certificateStatus = 'Ïú†Ìö®'; // statusÍ∞Ä ÏóÜÏúºÎ©¥ Ïú†Ìö®Î°ú Í∞ÑÏ£º
        console.log(`ÏïÑÏù¥ÌÖú ${index + 1}: status Ï†ïÎ≥¥Í∞Ä ÏóÜÏñ¥ Í∏∞Î≥∏Í∞í 'Ïú†Ìö®'Î°ú ÏÑ§Ï†ï`);
      }
      
      console.log(`ÏïÑÏù¥ÌÖú ${index + 1} ÏµúÏ¢Ö ÏÉÅÌÉú: "${certificateStatus}"\n`);

      // Certificate Ïª¥Ìè¨ÎÑåÌä∏ÏôÄ ÎèôÏùºÌïú Íµ¨Ï°∞Î°ú Ï†ïÍ∑úÌôî
      const processedItem = {
        id: credentialSubject.id || `temp-id-${index}`,
        certificateName: credentialSubject.certificateName || credentialSubject.title || 'Ï†úÎ™© ÏóÜÏùå',
        issuer: credentialSubject.issuer || 'Î∞úÍ∏âÍ∏∞Í¥Ä ÏóÜÏùå',
        // Î∞úÍ∏âÏùºÏùÄ Ïó¨Îü¨ ÏúÑÏπòÏóêÏÑú ÌôïÏù∏
        issueDate: credentialSubject.issueDate || 
        item.message?.payload?.issuseDate || 
        item.message?.payload?.issuanceDate ||
        item.message?.verifiableCredential?.issuanceDate,
        status: certificateStatus, // ÏµúÏ¢Ö Í≤∞Ï†ïÎêú ÏÉÅÌÉú
        imagePath: credentialSubject.ImagePath || credentialSubject.imagePath,
        userName: credentialSubject.userName,
        userId: credentialSubject.userId,
        description: credentialSubject.description,
        userDid: credentialSubject.userDid,
        issuerId: credentialSubject.issuerId,
        DOB: credentialSubject.DOB,
        requestDate: credentialSubject.requestDate,
        request: credentialSubject.request,
        requestType: requestType, // Ï∂îÏ∂úÎêú requestType
        originalStatus: statusValue, // ÏõêÎ≥∏ status Î≥¥Í¥Ä
        // Certificate Ïª¥Ìè¨ÎÑåÌä∏ÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî Ï†ÑÏ≤¥ Íµ¨Ï°∞ Î≥¥Í¥Ä
        rawData: item,
        // Certificate Ïä§ÌÜ†Ïñ¥ÏóêÏÑú Í∏∞ÎåÄÌïòÎäî Íµ¨Ï°∞
        vc: {
          credentialSubject: credentialSubject
        },
        jwt: item.message?.jwt || item.message?.payload?.jwt
      };
      
      return processedItem;
    }).filter(Boolean); // null Í∞í Ï†úÍ±∞
  }
  
  return [];
},
    enabled: !!isLoggedIn && !!user?.userId,
    staleTime: 5 * 60 * 1000, // 5Î∂ÑÍ∞Ñ fresh
    cacheTime: 10 * 60 * 1000, // 10Î∂ÑÍ∞Ñ Ï∫êÏãú Ïú†ÏßÄ
    refetchOnMount: false, // ÎßàÏö¥Ìä∏ Ïãú ÏûêÎèô refetch ÏïàÌï®
    retry: 2,
    onError: (error) => {
      console.error('ÏàòÎ£åÏ¶ù Ï°∞Ìöå Ïã§Ìå®:', error);
    }
  });

  // ÏïåÎ¶º Ï∂îÍ∞Ä Ìï®Ïàò
  const pushNotif = (title, message) => {
    if (user?.id || user?.userId) {
      addNotification(user.id || user.userId, {
        id: Date.now(),
        title,
        message,
        ts: Date.now(),
        read: false,
      });
    }
  };

  // Í≤ÄÏÉâ/Ï†ïÎ†¨/ÏÉÅÌÉúÌïÑÌÑ∞/ÌéòÏù¥ÏßÄ
  const [q, setQ] = useState('');
  const [sort, setSort] = useState('date_desc');       // date_desc | date_asc | title | issuer
  const [status, setStatus] = useState('all');         // all | Ïú†Ìö® | ÌèêÍ∏∞
  const [page, setPage] = useState(1);
  const pageSize = 9;

  // ÌïÑÌÑ∞ÎßÅ + Ï†ïÎ†¨
  const filtered = useMemo(() => {
    const text = q.trim().toLowerCase();
    
    // Î™®Îì† ÏàòÎ£åÏ¶ùÏùò ÏÉÅÌÉú ÌòÑÌô© Î°úÍπÖ
    const statusCounts = allCerts.reduce((acc, cert) => {
      acc[cert.status] = (acc[cert.status] || 0) + 1;
      return acc;
    }, {});
    console.log('Ï†ÑÏ≤¥ ÏàòÎ£åÏ¶ù ÏÉÅÌÉú ÌòÑÌô©:', statusCounts);
    
    let arr = allCerts.filter((c) => {
      // Ï†úÎ™©Í≥º Í∏∞Í¥ÄÎ™Ö Î™®ÎëêÏóêÏÑú Í≤ÄÏÉâ
      const matchText = !text || 
        (c.certificateName || c.title || '').toLowerCase().includes(text) || 
        (c.issuer || '').toLowerCase().includes(text);
      
      // ÏÉÅÌÉú ÌïÑÌÑ∞ÎßÅ - null/undefined Ï≤¥ÌÅ¨ Í∞ïÌôî
      const certStatus = c.status || 'Ïïå Ïàò ÏóÜÏùå';
      const matchStatus = status === 'all' ? true : certStatus === status;
      
      // ÎîîÎ≤ÑÍπÖ: ÌèêÍ∏∞ ÏÉÅÌÉú ÏàòÎ£åÏ¶ùÏù¥ ÌïÑÌÑ∞ÎßÅÎêòÎäîÏßÄ ÌôïÏù∏
      if (certStatus === 'ÌèêÍ∏∞') {
        console.log('ÌèêÍ∏∞ ÏàòÎ£åÏ¶ù ÌïÑÌÑ∞ÎßÅ ÌôïÏù∏:', {
          name: c.certificateName,
          certStatus,
          currentFilter: status,
          willShow: matchText && matchStatus
        });
      }
      
      return matchText && matchStatus;
    });

    // Ï†ïÎ†¨
    arr = [...arr].sort((a, b) => {
      const aDate = a.issueDate || a.requestDate || a.createdAt || '1970-01-01';
      const bDate = b.issueDate || b.requestDate || b.createdAt || '1970-01-01';
      const aTitle = a.certificateName || a.title || '';
      const bTitle = b.certificateName || b.title || '';
      const aIssuer = a.issuer || '';
      const bIssuer = b.issuer || '';

      if (sort === 'date_desc') return bDate.localeCompare(aDate);
      if (sort === 'date_asc')  return aDate.localeCompare(bDate);
      if (sort === 'title')     return aTitle.localeCompare(bTitle, 'ko');
      if (sort === 'issuer')    return aIssuer.localeCompare(bIssuer, 'ko');
      return 0;
    });

    console.log(`ÌïÑÌÑ∞ÎßÅ Í≤∞Í≥º: ${arr.length}Í∞ú (Ï†ÑÏ≤¥: ${allCerts.length}Í∞ú)`);
    return arr;
  }, [allCerts, q, sort, status]);

  // ÌéòÏù¥ÏßÄ Îç∞Ïù¥ÌÑ∞
  const total = filtered.length;
  const totalPages = Math.max(1, Math.ceil(total / pageSize));
  const pageData = useMemo(() => {
    const start = (page - 1) * pageSize;
    return filtered.slice(start, start + pageSize);
  }, [filtered, page, pageSize]);

  // Í≤ÄÏÉâ/Ï†ïÎ†¨/ÏÉÅÌÉú Î∞îÎÄåÎ©¥ Ï≤´ ÌéòÏù¥ÏßÄÎ°ú
  useEffect(() => setPage(1), [q, sort, status]);

  const badgeOf = (s) => {
    if (s === 'Ïú†Ìö®')   return 'bg-green-100 text-green-700';
    if (s === 'ÌèêÍ∏∞')   return 'bg-red-100 text-red-600'; // ÌèêÍ∏∞Îäî Îπ®Í∞ÑÏÉâÏúºÎ°ú
    return 'bg-gray-100 text-gray-600';
  };

  // Í≤ÄÏÉâ ÌÉÄÏûÖÏóê Îî∞Î•∏ placeholder ÌÖçÏä§Ìä∏
  const getPlaceholder = () => {
    return 'ÏàòÎ£åÏ¶ùÎ™Ö ÎòêÎäî Í∏∞Í¥ÄÎ™Ö Í≤ÄÏÉâ';
  };

  // ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  const handleCertificateClick = (cert) => {
    
    // ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
     router.push(`/certificates/detail?id=${cert.id}`);
  };

  // Ïï°ÏÖò Ìï∏Îì§Îü¨Îì§
  const handleShare = async (cert, e) => {
    e.stopPropagation(); // Ïπ¥Îìú ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞©ÏßÄ
    
    try {
      // ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú DID Ï†ïÎ≥¥ Ï∂îÏ∂ú
      const rawData = cert.rawData;
      const userDid = cert.userDid || rawData?.message?.payload?.sub || 'did:example:1234567890abcdef';
      const jwt = rawData?.message?.jwt || '';
      
      // DID Í∏∞Î∞ò Í≥µÏú† ÎßÅÌÅ¨ ÏÉùÏÑ±
      const shareData = {
        did: userDid,
        title: cert.certificateName || cert.title,
        issuer: cert.issuer,
        jwt: jwt,
        certificateId: cert.id
      };
      
      const encoded = btoa(JSON.stringify(shareData));
      const url = `${window.location.origin}/verify/${encoded}`;
      
      if (navigator.clipboard?.writeText) {
        await navigator.clipboard.writeText(url);
      }
      pushNotif('Í≥µÏú† ÎßÅÌÅ¨ Î≥µÏÇ¨', 'ÏàòÎ£åÏ¶ù Í≤ÄÏ¶ù ÎßÅÌÅ¨Í∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
    } catch {
      pushNotif('Í≥µÏú† ÎßÅÌÅ¨ Î≥µÏÇ¨ Ïã§Ìå®', 'Î∏åÎùºÏö∞Ï†Ä Î≥¥Ïïà Ï†ïÏ±ÖÏúºÎ°ú Î≥µÏÇ¨Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };

  const handleRevoke = async (cert, reason, e) => {
    e.stopPropagation(); // Ïπ¥Îìú ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞©ÏßÄ
    
    try {
      console.log('ÌèêÍ∏∞ ÏöîÏ≤≠:', { certId: cert.id, reason });
      
      const formData = new FormData();
      
      // ÌèêÍ∏∞ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
      formData.append('userName', cert.userName);
      formData.append('userId', user.userId || user.id);
      formData.append('certificateName', cert.certificateName);
      formData.append('description', reason.trim());
      formData.append('request', 'revoke');
      formData.append('DOB', cert.DOB);
      
      // Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏù¥ ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
      if (cert.imagePath) {
        try {
          const response = await fetch(cert.imagePath);
          const blob = await response.blob();
          const file = new File([blob], 'certificate-image.jpg', { type: blob.type });
          formData.append('file', file);
        } catch (error) {
          console.warn('Ïù¥ÎØ∏ÏßÄ ÌååÏùº Î≥ÄÌôò Ïã§Ìå®:', error);
        }
      }
      
      // ÌèêÍ∏∞ API ÏöîÏ≤≠
      await axios.post(
        `${process.env.NEXT_PUBLIC_API_BASE_URL}/user/vc/request`,
        formData,
      );
      
      // ÏÑ±Í≥µ Ïãú Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Í∞ÄÏ†∏Ïò§Í∏∞
      refetch();
      
      pushNotif('ÌèêÍ∏∞ ÏöîÏ≤≠ ÏôÑÎ£å', `"${cert.certificateName || cert.title}" ÌèêÍ∏∞ ÏöîÏ≤≠Ïù¥ Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§.`);
    } catch (error) {
      console.error('ÌèêÍ∏∞ ÏöîÏ≤≠ Ïã§Ìå®:', error);
      pushNotif('ÌèêÍ∏∞ ÏöîÏ≤≠ Ïã§Ìå®', 'ÌèêÍ∏∞ ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleDownload = (cert, e) => {
    e.stopPropagation(); // Ïπ¥Îìú ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Î∞©ÏßÄ
    
    // Ïã§Ï†ú Îã§Ïö¥Î°úÎìú Î°úÏßÅ Íµ¨ÌòÑ
    try {
      // PDF Îã§Ïö¥Î°úÎìú ÎòêÎäî Ïù¥ÎØ∏ÏßÄ Îã§Ïö¥Î°úÎìú
      const link = document.createElement('a');
      link.href = cert.imagePath || cert.downloadUrl || '#';
      link.download = `${cert.certificateName || cert.title || 'ÏàòÎ£åÏ¶ù'}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      pushNotif('Îã§Ïö¥Î°úÎìú ÏãúÏûë', `"${cert.certificateName || cert.title}" Îã§Ïö¥Î°úÎìúÎ•º ÏãúÏûëÌï©ÎãàÎã§.`);
    } catch (error) {
      console.error('Îã§Ïö¥Î°úÎìú Ïã§Ìå®:', error);
      pushNotif('Îã§Ïö¥Î°úÎìú Ïã§Ìå®', 'Îã§Ïö¥Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };



  // Î°úÎî© ÏÉÅÌÉú
  if (loading) {
    return (
      <main className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 lg:ml-64">
        <div className="max-w-5xl mx-auto px-4 sm:px-6 py-8">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-600 mx-auto mb-4"></div>
              <p className="text-gray-600">ÏàòÎ£åÏ¶ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
            </div>
          </div>
        </div>
      </main>
    );
  }

  // ÏóêÎü¨ ÏÉÅÌÉú
  if (error) {
    return (
      <main className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 lg:ml-64">
        <div className="max-w-5xl mx-auto px-4 sm:px-6 py-8">
          <div className="bg-white rounded-2xl border border-gray-200 p-10 text-center">
            <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-red-100 flex items-center justify-center">
              <span className="text-2xl text-red-500"></span>
            </div>
            <h2 className="text-lg font-semibold text-gray-900 mb-2">Ïò§Î•ò Î∞úÏÉù</h2>
            <p className="text-gray-600 mb-4">{error.message || 'ÏàòÎ£åÏ¶ù Ï°∞Ìöå Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'}</p>
            <button
              onClick={() => refetch()}
              className="px-4 py-2 bg-cyan-500 text-white rounded-lg hover:bg-cyan-600 transition-colors"
            >
              Îã§Ïãú ÏãúÎèÑ
            </button>
          </div>
        </div>
      </main>
    );
  }

  return (
    <>
      <main className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 lg:ml-64">
        <div className="max-w-5xl mx-auto px-4 sm:px-6 py-8">
          {/* ÏÉÅÎã® */}
          <div className="flex flex-wrap items-end justify-between gap-3 mb-4">
            <div>
              <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">ÎÇ¥ ÏàòÎ£åÏ¶ù</h1>
              <p className="text-gray-600 mt-1">Ï¥ù {total}Í∞ú</p>
            </div>

            {/* Í≤ÄÏÉâ/Ï†ïÎ†¨ */}
            <div className="flex flex-wrap items-center gap-3">
              {/* Í≤ÄÏÉâ ÏûÖÎ†• */}
              <div className="flex-1 min-w-[240px]">
                <input
                  value={q}
                  onChange={(e) => setQ(e.target.value)}
                  placeholder={getPlaceholder()}
                  className="w-full h-11 px-4 rounded-xl border border-gray-200 bg-white text-sm placeholder-gray-400 focus:outline-none focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 transition-colors"
                />
              </div>
              
              {/* Ï†ïÎ†¨ ÏÑ†ÌÉù */}
              <select
                value={sort}
                onChange={(e) => setSort(e.target.value)}
                className="h-11 px-4 rounded-xl border border-gray-200 bg-white text-sm focus:outline-none focus:border-cyan-500 focus:ring-1 focus:ring-cyan-500 transition-colors cursor-pointer"
              >
                <option value="date_desc">ÏµúÏã†Ïàú</option>
                <option value="date_asc">Ïò§ÎûòÎêúÏàú</option>
                <option value="title">Ï†úÎ™©Ïàú</option>
                <option value="issuer">Í∏∞Í¥ÄÏàú</option>
              </select>
            </div>
          </div>

          {/* ÏÉÅÌÉú ÌïÑÌÑ∞ Î∞î */}
          <div className="mb-5 flex flex-wrap gap-2">
            {[
              { key: 'all', label: 'Ï†ÑÏ≤¥' },
              { key: 'Ïú†Ìö®', label: 'Ïú†Ìö®' },
              { key: 'ÌèêÍ∏∞', label: 'ÌèêÍ∏∞' },
            ].map((opt) => {
              const active = status === opt.key;
              
              // Í∞Å ÏÉÅÌÉúÎ≥Ñ Í∞úÏàò Í≥ÑÏÇ∞
              const count = opt.key === 'all' 
                ? allCerts.length 
                : allCerts.filter(c => c.status === opt.key).length;
              
              return (
                <button
                  key={opt.key}
                  onClick={() => setStatus(opt.key)}
                  className={`h-9 px-3 rounded-full border text-sm ${
                    active
                      ? 'bg-cyan-500 border-cyan-500 text-white'
                      : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  {opt.label} ({count})
                </button>
              );
            })}
          </div>

          {/* ÌòÑÏû¨ Í≤ÄÏÉâ Ï°∞Í±¥ ÌëúÏãú */}
          {(q || status !== 'all') && (
            <div className="mb-4 flex flex-wrap items-center gap-2 text-sm text-gray-600">
              <span>Í≤ÄÏÉâ Ï°∞Í±¥:</span>
              {q && (
                <span className="px-2 py-1 bg-blue-100 text-blue-700 rounded">
                  Í≤ÄÏÉâÏñ¥: "{q}"
                </span>
              )}
              {status !== 'all' && (
                <span className="px-2 py-1 bg-green-100 text-green-700 rounded">
                  ÏÉÅÌÉú: {status}
                </span>
              )}
              <button
                onClick={() => {
                  setQ('');
                  setStatus('all');
                }}
                className="px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200"
              >
                Ï¥àÍ∏∞Ìôî
              </button>
            </div>
          )}

          {/* Î™©Î°ù(Ïπ¥Îìú ÌòïÌÉú) */}
          {pageData.length === 0 ? (
            <div className="bg-white rounded-2xl border border-gray-200 p-10 text-center">
              <p className="text-gray-600">Ï°∞Í±¥Ïóê ÎßûÎäî ÏàòÎ£åÏ¶ùÏù¥ ÏóÜÏäµÎãàÎã§.</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {pageData.map((c) => (
                <div 
                  key={c.id} 
                  className="bg-white rounded-2xl border border-gray-200 overflow-hidden hover:shadow-lg transition-all duration-300 cursor-pointer group"
                  onClick={() => handleCertificateClick(c)}
                >
                  {/* Ïç∏ÎÑ§Ïùº Ïù¥ÎØ∏ÏßÄ */}
                  <div className="relative h-48 bg-gradient-to-br from-cyan-50 to-blue-50 flex items-center justify-center overflow-hidden">
                    {c.imagePath ? (
                      <img 
                        src={c.imagePath} 
                        alt={c.certificateName}
                        className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                      />
                    ) : (
                      <div className="text-center">
                        <div className="w-16 h-16 mx-auto mb-2 rounded-full bg-cyan-100 flex items-center justify-center">
                          <span className="text-2xl text-cyan-600">üìú</span>
                        </div>
                        <p className="text-sm text-gray-500">ÏàòÎ£åÏ¶ù</p>
                      </div>
                    )}
                    
                    {/* ÏÉÅÌÉú Î∞∞ÏßÄ */}
                    <div className="absolute top-3 right-3">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${badgeOf(c.status)}`}>
                        {c.status}
                      </span>
                    </div>
                  </div>

                  {/* Ïπ¥Îìú ÎÇ¥Ïö© */}
                  <div className="p-6">
                    {/* ÏàòÎ£åÏ¶ù Ï†úÎ™© */}
                    <h3 className="text-lg font-bold text-gray-900 mb-2 line-clamp-2 group-hover:text-cyan-600 transition-colors">
                      {c.certificateName}
                    </h3>
                    
                    {/* Î∞úÍ∏âÍ∏∞Í¥Ä */}
                    <p className="text-sm text-gray-600 mb-3">
                      {c.issuer}
                    </p>
                    
                    {/* ÏàòÎ£åÏûê Ï†ïÎ≥¥ */}
                    <div className="flex items-center gap-3 mb-4">
                      <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center">
                        <span className="text-xs font-medium text-gray-600">
                          {c.userName?.charAt(0) || '?'}
                        </span>
                      </div>
                      <div>
                        <p className="text-sm font-medium text-gray-900">{c.userName}</p>
                        <p className="text-xs text-gray-500">ÏàòÎ£åÏûê</p>
                      </div>
                    </div>
                    
                    {/* Î∞úÍ∏âÏùº */}
                    <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
                      <span>Î∞úÍ∏âÏùº</span>
                      <span className="font-medium">
                        {c.issueDate ? new Date(c.issueDate).toLocaleDateString('ko-KR') : 'N/A'}
                      </span>
                    </div>
                    
            
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* ÌéòÏù¥ÏßÄÎÑ§Ïù¥ÏÖò */}
          {totalPages > 1 && (
            <div className="flex items-center justify-center gap-3 mt-8">
              <button
                onClick={() => setPage((p) => Math.max(1, p - 1))}
                disabled={page === 1}
                className="px-4 h-10 rounded-xl border border-gray-200 bg-white text-sm font-medium text-gray-600 hover:bg-gray-50 disabled:opacity-40 disabled:hover:bg-white transition-colors"
              >
                Ïù¥Ï†Ñ
              </button>
              <div className="flex items-center gap-1.5">
                {Array.from({length: totalPages}, (_, i) => i + 1).map((p) => (
                  <button
                    key={p}
                    onClick={() => setPage(p)}
                    className={`
                      w-10 h-10 rounded-xl text-sm font-medium transition-colors
                      ${page === p 
                        ? 'bg-cyan-500 text-white' 
                        : 'bg-white text-gray-600 hover:bg-gray-50 border border-gray-200'
                      }
                    `}
                  >
                    {p}
                  </button>
                ))}
              </div>
              <button
                onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
                disabled={page === totalPages}
                className="px-4 h-10 rounded-xl border border-gray-200 bg-white text-sm font-medium text-gray-600 hover:bg-gray-50 disabled:opacity-40 disabled:hover:bg-white transition-colors"
              >
                Îã§Ïùå
              </button>
            </div>
          )}
        </div>
      </main>
    </>
  );
}